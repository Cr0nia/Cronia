generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  phone         String?
  passwordHash  String?      
  kycLevel      Int           @default(0)
  status        String        @default("pending")
  createdAt     DateTime      @default(now())
  wallets       Wallet[]
  creditAccount CreditAccount?
  scores        Score[]
  kycRequests   KycRequest[]
}

model Wallet {
  id           String   @id @default(uuid())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  pubkey       String   @unique
  aaRef        String?
  custodied    Boolean  @default(true)
  skEncrypted  String?  
  createdAt    DateTime @default(now())
}


model KycRequest {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  provider  String
  status    String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditAccount {
  ownerPubkey   String   @id
  limitUsdc     Float    @default(0)
  usedUsdc      Float    @default(0)
  healthFactor  Float    @default(1)
  score         Int      @default(600)
  billingDay    Int      @default(15)
  status        String   @default("active")
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @unique
}

model CollateralPosition {
  id          String   @id @default(uuid())
  ownerPubkey String
  mint        String
  amount      Float
  valuation   Float
  ltvBps      Int
  updatedAt   DateTime @default(now())
}

model Asset {
  mint        String   @id
  symbol      String
  name        String
  decimals    Int
  type        String
  defaultLtvBps Int
  haircutBps  Int
}

model Price {
  id        String   @id @default(uuid())
  mint      String   @unique
  priceUsdc Float
  lastTs    DateTime @default(now())
}

model Merchant {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String?
  cnpj            String?
  category        String?
  apiKeyHash      String?  @unique  
  callbackUrl     String?
  takeRateBps     Int      @default(180)
  maxInstallments Int      @default(12)
  minTicket       Float    @default(10)
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  sales           Sale[]
  wallets         MerchantWallet[]
  paymentIntents  PaymentIntent[]
}

model MerchantWallet {
  id          String   @id @default(uuid())
  merchant    Merchant @relation(fields: [merchantId], references: [id])
  merchantId  String
  pubkey      String   @unique
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model PaymentIntent {
  id              String   @id @default(cuid())
  merchant        Merchant @relation(fields: [merchantId], references: [id])
  merchantId      String
  amountUsdc      Float
  currency        String
  description     String?
  maxInstallments Int       @default(12)
  status          String    @default("created")
  ownerPubkey     String?
  orderIdExt      String?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
}


model Sale {
  id           String    @id @default(uuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id])
  merchantId   String
  clientPubkey String
  totalUsdc    Float
  installments Int
  status       String    @default("pending")
  txSig        String?
  createdAt    DateTime  @default(now())
  receivables  ReceivableNote[]
}

model ReceivableNote {
  notePda     String   @id
  buyer       String
  merchantId  String
  beneficiary String
  amountUsdc  Float
  dueTs       DateTime
  status      String   @default("issued")
  orderId     String
  createdAt   DateTime @default(now())
  sale        Sale?    @relation(fields: [saleId], references: [id])
  saleId      String?
  advances    PoolAdvance[]
}

model Statement {
  id          String    @id @default(uuid())
  ownerPubkey String
  cycleId     String
  closeTs     DateTime
  totalDue    Float
  minPayment  Float
  items       StatementItem[]
}

model StatementItem {
  id           String    @id @default(uuid())
  statement    Statement @relation(fields: [statementId], references: [id])
  statementId  String
  type         String
  amountUsdc   Float
  metaJson     Json
}

model PoolAdvance {
  id          String   @id @default(uuid())
  notePda     String
  poolPda     String
  grossUsdc   Float?
  discountUsdc Float?
  netUsdc     Float?
  txSignature String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  note        ReceivableNote? @relation(fields: [notePda], references: [notePda])
}

model Score {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  value       Int
  maxValue    Int
  label       String
  generatedAt DateTime @default(now())
}

model OnchainEvent {
  id          String   @id @default(uuid())
  program     String
  event       String
  slot        Int
  sig         String
  payload     Json
  createdAt   DateTime @default(now())
}

model JobsRuns {
  id          String   @id @default(uuid())
  jobName     String
  startedAt   DateTime
  finishedAt  DateTime?
  ok          Boolean  @default(false)
  details     Json?

  @@unique([jobName, startedAt])
}

model AuditLog {
  id         String   @id @default(uuid())
  actorType  String   // user, admin, system
  actorId    String?
  action     String   // create, update, delete, approve, reject, etc
  entity     String   // User, Merchant, CreditAccount, etc
  entityId   String
  diffJson   Json?    // Mudan√ßas realizadas
  ts         DateTime @default(now())

  @@index([entity, entityId])
  @@index([actorType, actorId])
  @@index([ts])
}

model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  updatedBy String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Webhook {
  id        String   @id @default(uuid())
  target    String   // merchant:id, helius, etc
  url       String
  payload   Json
  status    String   // success, failed, pending
  attempts  Int      @default(0)
  lastError String?
  createdAt DateTime @default(now())

  @@index([target])
  @@index([status])
  @@index([createdAt])
}
