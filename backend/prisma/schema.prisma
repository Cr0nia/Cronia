generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  phone         String?
  passwordHash  String?      
  kycLevel      Int           @default(0)
  status        String        @default("pending")
  createdAt     DateTime      @default(now())
  wallets       Wallet[]
  creditAccount CreditAccount?
  scores        Score[]
  kycRequests   KycRequest[]
}

model Wallet {
  id           String   @id @default(uuid())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  pubkey       String   @unique
  aaRef        String?
  custodied    Boolean  @default(true)
  skEncrypted  String?  
  createdAt    DateTime @default(now())
}


model KycRequest {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  provider  String
  status    String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditAccount {
  ownerPubkey   String   @id
  limitUsdc     Float    @default(0)
  usedUsdc      Float    @default(0)
  healthFactor  Float    @default(1)
  score         Int      @default(600)
  billingDay    Int      @default(15)
  status        String   @default("active")
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @unique
}

model CollateralPosition {
  id          String   @id @default(uuid())
  ownerPubkey String
  mint        String
  amount      Float
  valuation   Float
  ltvBps      Int
  updatedAt   DateTime @default(now())
}

model Asset {
  mint        String   @id
  symbol      String
  name        String
  decimals    Int
  type        String
  defaultLtvBps Int
  haircutBps  Int
}

model Price {
  id        String   @id @default(uuid())
  mint      String
  priceUsdc Float
  lastTs    DateTime @default(now())
}

model Merchant {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String?
  cnpj            String?
  category        String?
  apiKeyHash      String?
  callbackUrl     String?
  takeRateBps     Int      @default(180)
  maxInstallments Int      @default(12)
  minTicket       Float    @default(10)
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  sales           Sale[]
}

model Sale {
  id           String    @id @default(uuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id])
  merchantId   String
  clientPubkey String
  totalUsdc    Float
  installments Int
  status       String    @default("pending")
  txSig        String?
  createdAt    DateTime  @default(now())
  receivables  ReceivableNote[]
}

model ReceivableNote {
  notePda     String   @id
  buyer       String
  merchantId  String
  beneficiary String
  amountUsdc  Float
  dueTs       DateTime
  status      String   @default("issued")
  orderId     String
  createdAt   DateTime @default(now())
  sale        Sale?    @relation(fields: [saleId], references: [id])
  saleId      String?
}

model Statement {
  id          String    @id @default(uuid())
  ownerPubkey String
  cycleId     String
  closeTs     DateTime
  totalDue    Float
  minPayment  Float
  items       StatementItem[]
}

model StatementItem {
  id           String    @id @default(uuid())
  statement    Statement @relation(fields: [statementId], references: [id])
  statementId  String
  type         String
  amountUsdc   Float
  metaJson     Json
}

model PoolAdvance {
  id          String   @id @default(uuid())
  notePda     String
  grossUsdc   Float
  discountUsdc Float
  netUsdc     Float
  tx          String?
  createdAt   DateTime @default(now())
}

model Score {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  value       Int
  maxValue    Int
  label       String
  generatedAt DateTime @default(now())
}

model OnchainEvent {
  id          String   @id @default(uuid())
  program     String
  event       String
  slot        Int
  sig         String
  payload     Json
  createdAt   DateTime @default(now())
}
