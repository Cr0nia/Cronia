// Cronia Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model Consumer {
  id              String   @id @default(uuid())
  walletAddress   String   @unique @map("wallet_address")
  email           String?  @unique
  phone           String?  @unique
  cpf             String?  @unique
  fullName        String?  @map("full_name")
  kycStatus       String   @default("pending") @map("kyc_status") // pending, approved, rejected
  kycProvider     String?  @map("kyc_provider")
  kycData         Json?    @map("kyc_data")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  creditAccounts  CreditAccount[]
  collateralDeposits CollateralDeposit[]
  transactions    Transaction[]

  @@map("consumers")
}

model Merchant {
  id              String   @id @default(uuid())
  walletAddress   String   @unique @map("wallet_address")
  businessName    String   @map("business_name")
  cnpj            String?  @unique
  email           String   @unique
  phone           String?
  kycStatus       String   @default("pending") @map("kyc_status")
  kycProvider     String?  @map("kyc_provider")
  kycData         Json?    @map("kyc_data")
  apiKey          String?  @unique @map("api_key")
  webhookUrl      String?  @map("webhook_url")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  checkoutSessions CheckoutSession[]
  receivables     Receivable[]

  @@map("merchants")
}

// ============================================
// CREDIT ACCOUNTS
// ============================================

model CreditAccount {
  id                  String   @id @default(uuid())
  consumerId          String   @map("consumer_id")
  pdaAddress          String   @unique @map("pda_address") // On-chain PDA
  creditLimit         Decimal  @map("credit_limit") @db.Decimal(18, 6)
  availableCredit     Decimal  @map("available_credit") @db.Decimal(18, 6)
  usedCredit          Decimal  @default(0) @map("used_credit") @db.Decimal(18, 6)
  totalCollateral     Decimal  @default(0) @map("total_collateral") @db.Decimal(18, 6)
  healthFactor        Decimal  @default(0) @map("health_factor") @db.Decimal(10, 4)
  status              String   @default("active") // active, frozen, liquidating, liquidated
  interestRate        Decimal  @map("interest_rate") @db.Decimal(5, 4) // ex: 0.0299 = 2.99%
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  consumer            Consumer @relation(fields: [consumerId], references: [id])
  collateralDeposits  CollateralDeposit[]
  invoices            Invoice[]
  transactions        Transaction[]

  @@map("credit_accounts")
}

// ============================================
// COLLATERAL
// ============================================

model CollateralDeposit {
  id                String   @id @default(uuid())
  creditAccountId   String   @map("credit_account_id")
  consumerId        String   @map("consumer_id")
  tokenMint         String   @map("token_mint")
  tokenType         String   @map("token_type") // SPL, NFT, LP
  amount            Decimal  @db.Decimal(18, 6)
  valueUsd          Decimal  @map("value_usd") @db.Decimal(18, 2)
  ltv               Decimal  @db.Decimal(5, 4) // Loan-to-Value ratio
  status            String   @default("active") // active, locked, liquidated
  depositedAt       DateTime @default(now()) @map("deposited_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  creditAccount     CreditAccount @relation(fields: [creditAccountId], references: [id])
  consumer          Consumer @relation(fields: [consumerId], references: [id])

  @@map("collateral_deposits")
}

// ============================================
// CHECKOUT & RECEIVABLES
// ============================================

model CheckoutSession {
  id              String   @id @default(uuid())
  merchantId      String   @map("merchant_id")
  consumerId      String?  @map("consumer_id")
  sessionToken    String   @unique @map("session_token")
  amount          Decimal  @db.Decimal(18, 2)
  currency        String   @default("BRL")
  status          String   @default("pending") // pending, approved, rejected, expired
  expiresAt       DateTime @map("expires_at")
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  merchant        Merchant @relation(fields: [merchantId], references: [id])
  receivable      Receivable?

  @@map("checkout_sessions")
}

model Receivable {
  id                String   @id @default(uuid())
  merchantId        String   @map("merchant_id")
  checkoutSessionId String   @unique @map("checkout_session_id")
  invoiceId         String?  @unique @map("invoice_id")
  amount            Decimal  @db.Decimal(18, 2)
  currency          String   @default("BRL")
  status            String   @default("pending") // pending, processing, settled, failed
  settledAt         DateTime? @map("settled_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  merchant          Merchant @relation(fields: [merchantId], references: [id])
  checkoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id])
  invoice           Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("receivables")
}

// ============================================
// BILLING & INVOICES
// ============================================

model Invoice {
  id                String   @id @default(uuid())
  creditAccountId   String   @map("credit_account_id")
  billingCycle      String   @map("billing_cycle") // ex: 2024-01
  dueDate           DateTime @map("due_date")
  totalAmount       Decimal  @map("total_amount") @db.Decimal(18, 2)
  principalAmount   Decimal  @map("principal_amount") @db.Decimal(18, 2)
  interestAmount    Decimal  @map("interest_amount") @db.Decimal(18, 2)
  feesAmount        Decimal  @default(0) @map("fees_amount") @db.Decimal(18, 2)
  paidAmount        Decimal  @default(0) @map("paid_amount") @db.Decimal(18, 2)
  status            String   @default("pending") // pending, paid, overdue, liquidated
  paidAt            DateTime? @map("paid_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  creditAccount     CreditAccount @relation(fields: [creditAccountId], references: [id])
  payments          Payment[]
  receivables       Receivable[]

  @@map("invoices")
}

model Payment {
  id              String   @id @default(uuid())
  invoiceId       String   @map("invoice_id")
  amount          Decimal  @db.Decimal(18, 2)
  paymentMethod   String   @map("payment_method") // pix, crypto, card
  txSignature     String?  @map("tx_signature") // Solana transaction signature
  status          String   @default("pending") // pending, confirmed, failed
  paidAt          DateTime @default(now()) @map("paid_at")
  createdAt       DateTime @default(now()) @map("created_at")

  invoice         Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// ============================================
// TRANSACTIONS & EVENTS
// ============================================

model Transaction {
  id                String   @id @default(uuid())
  creditAccountId   String?  @map("credit_account_id")
  consumerId        String?  @map("consumer_id")
  type              String   // deposit, withdrawal, purchase, payment, liquidation
  amount            Decimal  @db.Decimal(18, 6)
  tokenMint         String?  @map("token_mint")
  txSignature       String?  @unique @map("tx_signature")
  status            String   @default("pending") // pending, confirmed, failed
  metadata          Json?
  createdAt         DateTime @default(now()) @map("created_at")

  creditAccount     CreditAccount? @relation(fields: [creditAccountId], references: [id])
  consumer          Consumer? @relation(fields: [consumerId], references: [id])

  @@map("transactions")
}

model BlockchainEvent {
  id              String   @id @default(uuid())
  eventType       String   @map("event_type") // deposit, withdrawal, liquidation, etc.
  txSignature     String   @unique @map("tx_signature")
  blockTime       DateTime @map("block_time")
  programId       String   @map("program_id")
  accountAddress  String?  @map("account_address")
  payload         Json
  processed       Boolean  @default(false)
  processedAt     DateTime? @map("processed_at")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("blockchain_events")
}

// ============================================
// SYSTEM & CONFIG
// ============================================

model SystemConfig {
  id              String   @id @default(uuid())
  key             String   @unique
  value           String
  description     String?
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}

model AuditLog {
  id              String   @id @default(uuid())
  entity          String
  entityId        String   @map("entity_id")
  action          String
  userId          String?  @map("user_id")
  changes         Json?
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}
